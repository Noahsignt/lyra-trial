import Head from "next/head";
import { useRouter } from "next/router";

import { api } from "~/utils/api";
import { useSession } from "next-auth/react";

import Header from "~/components/Header";
import LoadingSpinner from "~/components/LoadingSpinner";
import PostView from "~/components/PostView";

import { createServerSideHelpers } from '@trpc/react-query/server';
import type {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from 'next';
import type { NextPage} from "next";
import superjson from 'superjson';
import { appRouter } from '~/server/api/root';
import { db } from '~/server/db';

export async function getStaticProps( context: GetStaticPropsContext<{ email: string }>, ) {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: {db, session: null},
    transformer: superjson, 
  });
  const email = context.params!.email;
  await helpers.user.getUserByEmail.prefetch({ email });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      email,
    },
    revalidate: 1,
  };
}

export const getStaticPaths: GetStaticPaths =  () => {
  return {
    paths: [],
    fallback: 'blocking',
  };
};

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

const UserPosts: NextPage<PageProps> = ({ email }) => {
    //static generated so need to check loading state
    const { data: userData } = api.user.getUserByEmail.useQuery({ email: email });
    const { data: sessionData, status: sessionLoading } = useSession();

    if(!userData){
        return <div>404: User not found</div>;
    }

    const { data: postData, isLoading: postsLoading, refetch: refetchPosts } = api.post.getPostsByUserEmail.useQuery({ email: email });

    const isLoading = postsLoading && sessionLoading === 'loading';

    const isUser = () => {
        return sessionData && sessionData.user.id === userData.id;
    }

    const YourPosts = () => {
        const router = useRouter();
        const { mutate: deletePost } = api.post.delete.useMutation({
            onSuccess: async () => {
                await refetchPosts();  
            },
            onError: (error) => {
                console.error("Error deleting post:", error);
            }
        });

        const handlePostDeleted = async (id: number) => {
            deletePost({ id: id });
        };

        return(
            <div className="flex flex-col items-center w-1/2 py-16">
                <div className="flex justify-between w-full border-b-2 border-gray-200 py-2">
                    <h1 className="text-4xl">Your Stories</h1>
                    <button onClick={() => router.push("/post")} className="bg-green-700 hover:bg-green-900 text-white py-2 px-4 rounded-full">
                        Write a story
                    </button>
                </div>
                {!isLoading ?
                <div className="flex flex-col justify-center items-center gap-4 w-full">
                    {postData?.map((post) => (
                        <PostView key={post.id} post={post} onUserPage={true} onPostDeleted={() => handlePostDeleted(post.id)} />
                    ))}
                </div>  
                    :
                <LoadingSpinner />}
            </div>
        )
    }

    const OtherPosts = () => {
        return(
            <div className="flex flex-col items-center w-1/2 py-16">
                <div className="flex justify-between w-full border-b-2 border-gray-200 py-2">
                    <h1 className="text-4xl">{userData.name}&apos;s Stories</h1>
                </div>
                {!isLoading ?
                <div className="flex flex-col justify-center items-center gap-4 w-full">
                    {postData?.map((post) => (
                        <PostView key={post.id} post={post}/>
                    ))}
                </div>  
                    :
                <LoadingSpinner />}
            </div>
        )
    }

    return(
        <>
            <Head>
                <title>{userData.name} Posts</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <main className="flex flex-col justify-center items-center">
                {isUser() ? <YourPosts /> : <OtherPosts />} 
            </main>
        </>
    )
}

export default UserPosts